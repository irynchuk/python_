openapi: 3.0.0
info:
  title: Calendar
  description: |-
    Laboratorna 5 Iskovych
  contact:
    email: iryna.iskovych.kn.2021@lpnu.ua
  version: 1.0.11
servers:
  - url: https://calendar.swagger.io/api/v10
tags:
  - name: user
    description: Operations about user
  - name: event
    description: Everything about your Events
  - name: member
    description: Operations about member
paths:

  /member/findByRole:
    get:
      tags:
        - member
      summary: Get your event by role
      description: You can get event created by you
      operationId: getByRole
      parameters:
        - name: role
          in: query
          description: Role values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: added
            enum:
              - admin
              - added

      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
            application/xml:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          description: Invalid status value
      security:
        - user_auth:
          - write:members
          - read:members


  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UserName'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserName'
            application/xml:
              schema:
                $ref: '#/components/schemas/UserName'
        default:
          description: successful operation
      security:
        - user_auth:
            - write:usernames
            - read:usernames
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operatio
      security:
        - user_auth:
            - write:events
            - read:events
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserName'
            application/xml:
              schema:
                $ref: '#/components/schemas/UserName'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
      security:
        - user_auth:
            - write:events
            - read:events
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserName'
          application/xml:
            schema:
              $ref: '#/components/schemas/UserName'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserName'
      responses:
        default:
          description: successful operation
      security:
        - user_auth:
            - write:events
            - read:events
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
      security:
        - user_auth:
            - write:events
            - read:events

  /event:
    put:
      tags:
        - event
      summary: Update an event
      description: Update an event by Id
      operationId: updateEvent
      requestBody:
        description: Update one of your events
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
          application/xml:
            schema:
              $ref: '#/components/schemas/Event'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
            application/xml:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          description: Invalid ID supplied
        '404':
          description: Event not found
        '405':
          description: Validation exception
      security:
        - user_auth:
          - write:events
          - read:events
    post:
      tags:
        - event
      summary: Add a new event
      description: Add a new event for you or a company
      operationId: addEvent
      requestBody:
        description: Create a new event
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
          application/xml:
            schema:
              $ref: '#/components/schemas/Event'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
            application/xml:
              schema:
                $ref: '#/components/schemas/Event'
        '405':
          description: Invalid input
      security:
        - user_auth:
          - write:events
          - read:events
  /event/findByStatus:
    get:
      tags:
        - event
      summary: Finds event by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findEventsByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: future
            enum:
              - future
              - in_process
              - ended
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
            application/xml:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          description: Invalid status value
      security:
        - user_auth:
          - write:events
          - read:events

  /event/findByName:
    get:
      tags:
        - event
      summary: Finds event by name
      description: You can find one of your events by name
      operationId: findEventByName
      parameters:
        - name: name
          in: query
          description: name to filter by
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        '400':
          description: Invalid tag value
      security:
        - user_auth:
          - write:events
          - read:events

  /event/{eventId}:
    get:
      tags:
        - event
      summary: Finds event by id
      description: Return a event with id you write
      operationId: findEventById
      parameters:
        - name: eventId
          in: path
          description: ID of event to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
            description: Successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Event'
              application/xml:
                schema:
                  $ref: '#/components/schemas/Event'
        '400':
              description: Invalid ID supplied
        '404':
             description: Event not found
        '405':
             description: Validation exception
      security:
        - api_key: []
        - user_auth:
          - write:events
          - read:events

    delete:
      tags:
        - event
      summary: Delete a event
      description: delete a event
      operationId: deleteEvent
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: eventId
          in: path
          description: Event id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid event value
      security:
        - user_auth:
            - write:events
            - read:events

  /event/{eventId}/addMemberToEvent:
    post:
      tags:
        - event
      summary: add member
      description: Add member to your event
      operationId: addMemberToEvent
      parameters:
        - name: eventId
          in: path
          description: Id event for which you want add another user
          required: true
          schema:
            type: integer
            format: inr64
        - name: additionalMember
          in: query
          description: Additional user
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserName'
      security:
        - user_auth:
            - write:usernames
            - read:usernames

components:
  schemas:
    Event:
      required:
        - name
      type: object
      properties:
        eventId:
          type: integer
          format: int64
          example: 12
        name:
          type: string
          example: Birth
        dayStart:
          type: string
          example: 14/10/22
        dayEnd:
          type: string
          example: 14/10/22
        timaStart:
          type: string
          example: 12:00
        timaEnd:
          type: string
          example: 15:00
        member:
          type: array
          xml:
            wrapper: true
          items:
            $ref: '#/components/schemas/Member'
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: event status
          enum:
            - future
            - in_process
            - ended
      xml:
        name: event

    Member:
      type: object
      properties:
        role:
          type: string
          description: member role
          enum:
            - admin
            - added
        power:
          type: string
          description: member role
          enum:
            - add
            - edit
            - comment
            - propose
      xml:
        name: Member

    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
    UserName:
      type: object
      properties:
        userId:
          type: integer
          format: int64
          example: 10
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
      xml:
        name: UserName

    User:
      type: object
      properties:
        userId:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: string
          description: Your status
          enum:
            - active
            - offline
            - busy
      xml:
        name: user

    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag

  requestBodies:
    Member:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Member'
        application/xml:
          schema:
            $ref: '#/components/schemas/Member'
    Event:
      description: Event object that needs to be added
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Event'
        application/xml:
          schema:
            $ref: '#/components/schemas/Event'

    UserName:
      description: User object that needs to be added
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserName'
        application/xml:
          schema:
            $ref: '#/components/schemas/UserName'


    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/UserName'

  securitySchemes:
    user_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://calendar.swagger.io/oauth/authorize
          scopes:
            write:events: modify events in your account
            read:events: read your events
    api_key:
      type: apiKey
      name: api_key
      in: header